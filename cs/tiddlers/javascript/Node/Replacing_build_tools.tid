created: 20150626154837198
modified: 20150630193802699
tags: Javascript Node.js
title: Replacing build tools
type: text/vnd.tiddlywiki

! Replacing build tools

!! Using multiple files

The two most popular glob libraries, //minimatch// and //glob//, share 1500 dependents, including JSHint, JSCS, Mocha, Jade, Stylus, Node-Sass... the list goes on.

This means you can just use file globs within npm scripts, like so:

```
"devDependencies": {
  "jshint": "latest"
},
"scripts": {
  "lint": "jshint *.js"
}
```

!! Running multiple tasks

You can either use the pre- or post- hooks - which are a good fit if the task is a prerequisite thing (i.e concating js before minfiying it), or you can use the bash && operator.

```
"devDependencies": {
  "jshint": "latest",
  "stylus": "latest",
  "browserify": "latest"
},
"scripts": {
  "lint": "jshint **",
  "build:css": "stylus assets/styles/main.styl > dist/main.css",
  "build:js": "browserify assets/scripts/main.js > dist/main.js",
  "build": "npm run build:css && npm run build:js",
  "prebuild:js": "npm run lint"
}
```

!! Streaming to multiple tasks

Bash and the Windows command line have the pipe operator (`|`), which can stream one command's output (`stdout`) and send it to another command's input (`stdin`). Let's say you want to run all of your CSS first through //Autoprefixer//, then //CSSMin//, then output to a file (using the `>` operator, which outputs `stdout` to a given file):

```
"devDependencies": {
  "autoprefixer": "latest",
  "cssmin": "latest"
},
"scripts": {
  "build:css": "autoprefixer -b 'last 2 versions' < assets/styles/main.css | cssmin > dist/main.css"
}
```

!! Version Bumping

Version bumping is a popular Grunt or Gulp task. Effectively it increments the version number up by one inside the package.json, makes a git commit, and tags said commit.

This actually comes baked into npm (it is a package manager after all). Simply run `npm version patch` to increment the patch number (e.g. 1.1.1 -> 1.1.2), `npm version minor` to increment the minor version number (e.g. 1.1.1 -> 1.2.0) or `npm version major` (e.g. 1.1.1 -> 2.0.0). It'll commit and tag up your package for you, all that is left is to `git push` and `npm publish`.

This can be fully customised too. For example, if you don't want it running `git tag`, simply run it with the `--git-tag-version=false` flag (or set it to permanently not with `npm config set git-tag-version false`). Want to configure the commit message? Simply run it with the `-m` flag, e.g. `npm version patch -m "Bumped to %s"` (set it permanently with `npm config set message "Bumped to %s`"). You can even get it to sign the tags for you, by running with the `--sign-git-tag=true` flag (or, once again, set it permanently with `npm config set sign-git-tag true`).

!! Compiling files to unique names

Effectively, trying to replace the functionality of gulp-hash and grunt-hash - take an input of JS and name it with the hash of its contents.

solution: [[hashmark|https://github.com/keithamus/hashmark]]

```
"devDependencies": {
  "autoprefixer": "latest",
  "cssmin": "latest"
},
"scripts": {
  "build:css": "autoprefixer -b '> 5%' < assets/styles/main.css | cssmin | hashmark -l 8 'dist/main.#.css'"
}
```

!! Watch

most tools facilitate this option themselves - and usually are much more in tune with the intricacies of the files that should be listened for. For example Mocha has the `-w` option, as does Stylus, Node-Sass, Jade, Karma, and others. You could use these options like so;

```
"devDependencies": {
  "mocha": "latest",
  "stylus": "latest"
},
"scripts": {
  "test": "mocha test/",
  "test:watch": "npm run test -- -w",

  "css": "stylus assets/styles/main.styl > dist/main.css",
  "css:watch": "npm run css -- -w"
}
```

Of course, not all tools support this, and even when they do - you might want to compose multiple compile targets into one task which watches for changes and runs the whole set. There are tools that watch files and execute commands when files change, for example [[watch|https://www.npmjs.org/package/watch]], [[onchange|https://www.npmjs.org/package/onchange]], [[dirwatch|https://www.npmjs.org/package/dirwatch]], or even [[nodemon|https://github.com/remy/nodemon]]:

```
"devDependencies": {
  "stylus": "latest",
  "jade": "latest",
  "browserify": "latest",
  "watch": "latest",
},
"scripts": {
  "build:js": "browserify assets/scripts/main.js > dist/main.js",
  "build:css": "stylus assets/styles/main.styl > dist/main.css",
  "build:html": "jade assets/html/index.jade > dist/index.html",
  "build": "npm run build:js && npm run build:css && npm run build:html",
  "build:watch": "watch 'npm run build' .",
}
```

Just run `npm run build:watch` and start developing! You could even optimise this further, with a little tool I wrote (once again, while writing this post): [[Parallelshell|https://www.npmjs.org/package/parallelshell]], which will keep multiple processes running at one time - a little like this:

```
"devDependencies": {
  "stylus": "latest",
  "jade": "latest",
  "browserify": "latest",
  "watch": "latest",
  "parallelshell": "latest"
},
"scripts": {
  "build:js": "browserify assets/scripts/main.js > dist/main.js",
  "watch:js": "watch 'npm run build:js' assets/scripts/",
  "build:css": "stylus assets/styles/main.styl > dist/main.css",
  "watch:css": "watch 'npm run build:css' assets/styles/",
  "build:html": "jade index.jade > dist/index.html",
  "watch:html": "watch 'npm run build:html' assets/html",
  "build": "npm run build:js && npm run build:css && npm run build:html",
  "build:watch": "parallelshell 'npm run watch:js' 'npm run watch:css' 'npm run watch:html'",
}
```

!! ~LiveReload

~LiveReload is a combination of command line tool and browser extension (or custom server) - as files change, ~LiveReload triggers the page you're looking at to reload meaning you never have to press refresh.

The npm package [[live-reload|https://www.npmjs.org/package/live-reload]] is a pretty suitable command line client for this. Here's an example of how to get it working:

```
"devDependencies": {
  "live-reload": "latest",
},
"scripts": {
  "livereload": "live-reload --port 9091 dist/",
}
```

```
<!-- In your HTML file -->  
<script src="//localhost:9091"></script>
```

Now running `npm run livereload` - when you visit the HTML page it'll start listening to the livereload server. Any changes to files in the `dist/` directory will notifiy clients, and the page will be reloaded.

!! Running tasks that don't come with binaries

It was pointed out to me that there are libs that don't come with binaries - such as [[favicon|https://www.npmjs.org/package/favicons]] - and so Grunt/Gulp plugins can be useful because they wrap the tools so they can be used within the task runners. If you find a package that you want to use, but it doesn't have a binary then simply write some JavaScript! You would have to if using Grunt or Gulp, so don't be afraid to just chuck a bit of JavaScript somewhere that wires it all up (or even better, submit a PR to the maintainers convincing them to support a command line interface!):

```
// scripts/favicon.js
var favicons = require('favicons');  
var path = require('path');  
favicons({  
    source: path.resolve('../assets/images/logo.png'),
    dest: path.resolve('../dist/'),
});
```

```
"devDependencies": {
  "favicons": "latest",
},
"scripts": {
  "build:favicon": "node scripts/favicon.js",
}
```